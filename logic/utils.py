import argparse, os

def get_data_frequency(dictionary, search_terms):
    distribution = {}
    for st in search_terms:
        distribution[st] = {}

    for path in dictionary:
        for search_term, values in dictionary[path].items():
            for cap in values:
                if cap not in list(distribution[search_term].keys()): 
                    distribution[search_term][cap] = 1
                else:
                    distribution[search_term][cap] += 1
    
    for st in search_terms:
        distribution[st] = dict(sorted(distribution[st].items(), key = lambda kv: (kv[1], kv[0]), reverse=True))

    return distribution

def check_positive(value):
    ivalue = int(value)
    if ivalue <= 0:
        raise argparse.ArgumentTypeError("%s is an invalid positive int value" % value)
    return ivalue

def check_path(value):
    if os.path.isfile(value) or os.path.isdir(value):
        return value
    else:
        raise argparse.ArgumentTypeError("%s is an invalid path" % value)